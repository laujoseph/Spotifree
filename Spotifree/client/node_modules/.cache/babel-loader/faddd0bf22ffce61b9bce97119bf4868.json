{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useAuth = code => {\n  _s();\n\n  const [accessToken, setAccessToken] = useState();\n  const [refreshToken, setRefreshToken] = useState();\n  const [expiresIn, setExpiresIn] = useState();\n  console.log(refreshToken);\n  useEffect(() => {\n    axios.post(\"http://localhost:3001/login\", {\n      code //posting code to this url route\n\n    }).then(res => {\n      console.log(res.data); // this token is required for requests\n\n      setAccessToken(res.data.accessToken);\n      setRefreshToken(res.data.refreshToken);\n      setExpiresIn(res.data.expiresIn); // pushState removes the excess codes in the URL\n\n      window.history.pushState({}, null, \"/\");\n    }) // redirects to login page if there's an error\n    .catch(() => {// window.location = \"/\";\n    }); // effect happens everytime code changes\n  }, [code]);\n  useEffect(() => {\n    // this effect should only be ran when there's no refreshToken or when it's about to expire\n    if (!refreshToken || !expiresIn) return;\n    const interval = setInterval(() => {\n      axios.post(\"http://localhost:3001/refresh\", {\n        refreshToken //posting code to this url route\n\n      }).then(res => {\n        setAccessToken(res.data.accessToken);\n        setExpiresIn(res.data.expiresIn); // pushState removes the excess codes in the URL\n\n        window.history.pushState({}, null, \"/\");\n      }) // redirects to login page if there's an error\n      .catch(() => {//   window.location = \"/\";\n      });\n    }, (expiresIn - 60) * 1000); // this effect to run 1min before token expires\n\n    return () => clearInterval(interval); // effect happens everytime refreshToken, expiresIn changes\n  }, [refreshToken, expiresIn]); // accessToken is the thing we need to call all the different spotify APIs.\n\n  return accessToken;\n};\n\n_s(useAuth, \"E9KOao32uIhQ/xJLaKV8nLvpvcw=\");\n\nexport default useAuth;","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/useAuth.js"],"names":["useState","useEffect","axios","useAuth","code","accessToken","setAccessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","console","log","post","then","res","data","window","history","pushState","catch","interval","setInterval","clearInterval"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAIC,IAAD,IAAU;AAAA;;AACxB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,EAA9C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,EAAhD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;AACAN,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CACFW,IADH,CACQ,6BADR,EACuC;AACnCT,MAAAA,IADmC,CAC7B;;AAD6B,KADvC,EAIGU,IAJH,CAISC,GAAD,IAAS;AACbJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACC,IAAhB,EADa,CAEb;;AACAV,MAAAA,cAAc,CAACS,GAAG,CAACC,IAAJ,CAASX,WAAV,CAAd;AACAG,MAAAA,eAAe,CAACO,GAAG,CAACC,IAAJ,CAAST,YAAV,CAAf;AACAG,MAAAA,YAAY,CAACK,GAAG,CAACC,IAAJ,CAASP,SAAV,CAAZ,CALa,CAMb;;AACAQ,MAAAA,MAAM,CAACC,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,IAA7B,EAAmC,GAAnC;AACD,KAZH,EAYK;AAZL,KAaGC,KAbH,CAaS,MAAM,CACX;AACD,KAfH,EADc,CAiBd;AACD,GAlBQ,EAkBN,CAAChB,IAAD,CAlBM,CAAT;AAoBAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACM,YAAD,IAAiB,CAACE,SAAtB,EAAiC;AAEjC,UAAMY,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCpB,MAAAA,KAAK,CACFW,IADH,CACQ,+BADR,EACyC;AACrCN,QAAAA,YADqC,CACvB;;AADuB,OADzC,EAIGO,IAJH,CAISC,GAAD,IAAS;AACbT,QAAAA,cAAc,CAACS,GAAG,CAACC,IAAJ,CAASX,WAAV,CAAd;AACAK,QAAAA,YAAY,CAACK,GAAG,CAACC,IAAJ,CAASP,SAAV,CAAZ,CAFa,CAGb;;AACAQ,QAAAA,MAAM,CAACC,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,IAA7B,EAAmC,GAAnC;AACD,OATH,EASK;AATL,OAUGC,KAVH,CAUS,MAAM,CACb;AACC,OAZH;AAaD,KAd2B,EAczB,CAACX,SAAS,GAAG,EAAb,IAAmB,IAdM,CAA5B,CAJc,CAkBe;;AAC7B,WAAO,MAAMc,aAAa,CAACF,QAAD,CAA1B,CAnBc,CAoBd;AACD,GArBQ,EAqBN,CAACd,YAAD,EAAeE,SAAf,CArBM,CAAT,CAzBwB,CAgDxB;;AACA,SAAOJ,WAAP;AACD,CAlDD;;GAAMF,O;;AAmDN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useAuth = (code) => {\n  const [accessToken, setAccessToken] = useState();\n  const [refreshToken, setRefreshToken] = useState();\n  const [expiresIn, setExpiresIn] = useState();\n  console.log(refreshToken);\n  useEffect(() => {\n    axios\n      .post(\"http://localhost:3001/login\", {\n        code, //posting code to this url route\n      })\n      .then((res) => {\n        console.log(res.data);\n        // this token is required for requests\n        setAccessToken(res.data.accessToken); \n        setRefreshToken(res.data.refreshToken);\n        setExpiresIn(res.data.expiresIn);\n        // pushState removes the excess codes in the URL\n        window.history.pushState({}, null, \"/\");\n      }) // redirects to login page if there's an error\n      .catch(() => {\n        // window.location = \"/\";\n      });\n    // effect happens everytime code changes\n  }, [code]);\n\n  useEffect(() => {\n    // this effect should only be ran when there's no refreshToken or when it's about to expire\n    if (!refreshToken || !expiresIn) return;\n\n    const interval = setInterval(() => {\n      axios\n        .post(\"http://localhost:3001/refresh\", {\n          refreshToken, //posting code to this url route\n        })\n        .then((res) => {\n          setAccessToken(res.data.accessToken);\n          setExpiresIn(res.data.expiresIn);\n          // pushState removes the excess codes in the URL\n          window.history.pushState({}, null, \"/\");\n        }) // redirects to login page if there's an error\n        .catch(() => {\n        //   window.location = \"/\";\n        });\n    }, (expiresIn - 60) * 1000); // this effect to run 1min before token expires\n    return () => clearInterval(interval)\n    // effect happens everytime refreshToken, expiresIn changes\n  }, [refreshToken, expiresIn]);\n\n  // accessToken is the thing we need to call all the different spotify APIs.\n  return accessToken;\n};\nexport default useAuth;\n"]},"metadata":{},"sourceType":"module"}