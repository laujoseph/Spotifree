{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport RecentlyPlayed from \"./RecentlyPlayed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\"\n});\n\nconst MainPage = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [userinfo, setUserInfo] = useState();\n\n  const chooseTrack = track => {\n    setCurrentTrack(track); // when choosing track, empty the search\n\n    setSearch(\"\");\n    setLyrics(\"\");\n  }; // user profile details\n\n\n  let displayName = [];\n  let displayCountry = [];\n  spotifyApi.getMe().then(function (data) {\n    console.log(data.body.country);\n    console.log('Authenticated user information', data.body);\n    displayCountry.push(data.body.country);\n    console.log(displayCountry);\n    return {\n      name: data.body.display_name,\n      email: data.body.email,\n      followers: data.body.followers\n    };\n  }, function (err) {\n    console.log('Something went wrong!', err);\n  });\n\n  function displayUserInfo(data) {\n    const username = data.display_name;\n  }\n\n  useEffect(() => {\n    if (!currentTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [currentTrack]);\n  console.log(searchResults); // whenever accesstoken changes, set token on spotifyAPI\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // for searching\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return; //info i want: artist name, album image, track name, URI\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchbox\",\n        type: \"search\",\n        placeholder: \"Search Tracks by Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchresultslist\",\n        children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          track: track,\n          chooseTrack: chooseTrack\n        }, track.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyricscontainer\",\n          children: lyrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MusicPlayer, {\n          trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n          accessToken: accessToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), displayCountry.map(reptile => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: reptile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPage, \"G12XkYwbWCoxY0KIjP8T3EqlK7g=\", false, function () {\n  return [useAuth];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResult","MusicPlayer","axios","RecentlyPlayed","spotifyApi","clientId","MainPage","code","accessToken","search","setSearch","searchResults","setSearchResults","currentTrack","setCurrentTrack","lyrics","setLyrics","userinfo","setUserInfo","chooseTrack","track","displayName","displayCountry","getMe","then","data","console","log","body","country","push","name","display_name","email","followers","err","displayUserInfo","username","get","params","title","artist","res","setAccessToken","cancel","searchTracks","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","uri","albumUrl","url","e","target","value","length","reptile"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport RecentlyPlayed from \"./RecentlyPlayed\";\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\",\n});\n\nconst MainPage = ({ code }) => {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [userinfo, setUserInfo] = useState();\n  const chooseTrack = (track) => {\n    setCurrentTrack(track);\n    // when choosing track, empty the search\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n  // user profile details\n  let displayName = [];\n  let displayCountry = [];\n  spotifyApi.getMe()\n  .then(function(data) {\n    console.log(data.body.country)\n    console.log('Authenticated user information', data.body);\n    displayCountry.push(data.body.country)\n    console.log(displayCountry)\n    return {\n      \n      name: data.body.display_name,\n      email: data.body.email,\n      followers: data.body.followers\n    }\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n  function displayUserInfo(data) {\n    const username= data.display_name\n  }\n\n  useEffect(() => {\n    if (!currentTrack) return;\n\n    axios\n      .get(\"http://localhost:3001/lyrics\", {\n        params: {\n          track: currentTrack.title,\n          artist: currentTrack.artist,\n        },\n      })\n      .then((res) => {\n        setLyrics(res.data.lyrics);\n      });\n  }, [currentTrack]);\n  console.log(searchResults);\n\n  // whenever accesstoken changes, set token on spotifyAPI\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  // for searching\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false;\n    spotifyApi.searchTracks(search).then((res) => {\n      if (cancel) return;\n      //info i want: artist name, album image, track name, URI\n      setSearchResults(\n        res.body.tracks.items.map((track) => {\n          // compares the image height and grabs the smallest image\n          const smallestAlbumImage = track.album.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image;\n              return smallest;\n            },\n            track.album.images[0]\n          );\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url,\n          };\n        })\n      );\n    });\n    return () => (cancel = true);\n  }, [search, accessToken]);\n\n  return (\n    <div className=\"container\">\n      <form>\n        <input\n          className=\"searchbox\"\n          type=\"search\"\n          placeholder=\"Search Tracks by Songs/Artists\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n        <div className=\"searchresultslist\">\n          {searchResults.map((track) => (\n            <TrackSearchResult\n              track={track}\n              key={track.uri}\n              chooseTrack={chooseTrack}\n            />\n          ))}\n          {searchResults.length === 0 && (\n            <div className=\"lyricscontainer\">{lyrics}</div>\n          )}\n        </div>\n        {/* passing in the access token to enable playback fn*/}\n        <div>\n          <MusicPlayer trackUri={currentTrack?.uri} accessToken={accessToken} />\n        </div>\n      </form>\n      {displayCountry.map((reptile) => (\n        <li>{reptile}</li>\n      ))}\n    </div>\n    \n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}