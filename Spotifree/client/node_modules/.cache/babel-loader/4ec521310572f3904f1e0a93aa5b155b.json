{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport FadeIn from \"react-fade-in\";\nimport UserProfile from \"./UserProfile\";\nimport RecentlyPlayed from \"./RecentlyPlayed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\"\n}); // const OAuth =\n//   \"BQCyyWCMzxyJmIBrI8YJFrMFVxkCnFBzO_REMsSUux8dJqj8xf73yHwFyv_dmiH53SF6dUG90vTM5U48_gopjm567ahaS3MF9Voo7n8mCRhnQR-jpb3FCDtltGjI2DPFf9OL1Q5sd5s8c49v2dsX\";\n\nconst MainPage = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [showGreeting, setShowGreeting] = useState(true);\n  const [userInfo, setUserInfo] = useState(false);\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n\n  const chooseTrack = track => {\n    setCurrentTrack(track); // when choosing track, empty the search\n\n    setSearch(\"\");\n    setLyrics(\"\");\n  }; // console.log(code)\n  // useEffect(()=>{\n  //   if (!accessToken) return;\n  //   spotifyApi.getMyRecentlyPlayedTracks({ limit: 20 }).then((res) => {\n  //     setRecentlyPlayed(\n  //       res.body.items.map(({track}) => {\n  //         return {\n  //           id: track.id,\n  //           artist: track.artists[0].name,\n  //           title: track.name,\n  //           uri: track.uri,\n  //           albumUrl: track.album.images[0].url,\n  //         };\n  //       })\n  //     )\n  //   })\n  // }, [accessToken]);\n  // Get recently played tracks \n\n\n  useEffect(() => {\n    if (!accessToken) return; // const fetchRecentlyPlayed = () => {\n\n    axios.get(\"https://api.spotify.com/v1/me/player/recently-played?limit=10\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      const recentlyplayedlist = res.data.items;\n      console.log(recentlyplayedlist);\n      setRecentlyPlayed(recentlyplayedlist);\n    }); // };\n    // fetchRecentlyPlayed();\n  }, []);\n  useEffect(() => {\n    if (!accessToken) return;\n\n    const fetchUserInfo = () => {\n      axios.get(\"https://api.spotify.com/v1/me\", {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        // console.log(res.data);\n        setUserInfo(res.data);\n      });\n    };\n\n    fetchUserInfo();\n  }, [accessToken]);\n  useEffect(() => {\n    setInterval(() => {\n      setShowGreeting(!showGreeting);\n    }, 3000);\n  }, []);\n  useEffect(() => {\n    if (!currentTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [currentTrack]); // console.log(searchResults);\n  // whenever accesstoken changes, set token on spotifyAPI\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return; //info i want: artist name, album image, track name, URI\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FadeIn, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"searchbox\",\n          type: \"search\",\n          placeholder: \"Search Tracks by Songs/Artists\",\n          value: search,\n          onChange: e => setSearch(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchresultslist\",\n          children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n            track: track,\n            chooseTrack: chooseTrack\n          }, track.uri, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lyricscontainer\",\n            children: lyrics\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(MusicPlayer, {\n            trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n            accessToken: accessToken\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n      userInfo: userInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecentlyPlayed, {\n      accessToken: accessToken,\n      recentlyPlayed: recentlyPlayed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPage, \"M8r5CWKBLuYPRDSRCAQNKgwqyDU=\", false, function () {\n  return [useAuth];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResult","MusicPlayer","axios","FadeIn","UserProfile","RecentlyPlayed","spotifyApi","clientId","MainPage","code","accessToken","search","setSearch","searchResults","setSearchResults","currentTrack","setCurrentTrack","lyrics","setLyrics","showGreeting","setShowGreeting","userInfo","setUserInfo","recentlyPlayed","setRecentlyPlayed","chooseTrack","track","get","headers","Authorization","then","res","recentlyplayedlist","data","items","console","log","fetchUserInfo","setInterval","params","title","artist","setAccessToken","cancel","searchTracks","body","tracks","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport FadeIn from \"react-fade-in\";\nimport UserProfile from \"./UserProfile\";\nimport RecentlyPlayed from \"./RecentlyPlayed\";\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\",\n});\n// const OAuth =\n//   \"BQCyyWCMzxyJmIBrI8YJFrMFVxkCnFBzO_REMsSUux8dJqj8xf73yHwFyv_dmiH53SF6dUG90vTM5U48_gopjm567ahaS3MF9Voo7n8mCRhnQR-jpb3FCDtltGjI2DPFf9OL1Q5sd5s8c49v2dsX\";\n\nconst MainPage = ({ code }) => {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [showGreeting, setShowGreeting] = useState(true);\n  const [userInfo, setUserInfo] = useState(false);\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n  const chooseTrack = (track) => {\n    setCurrentTrack(track);\n    // when choosing track, empty the search\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n// console.log(code)\n  // useEffect(()=>{\n  //   if (!accessToken) return;\n  //   spotifyApi.getMyRecentlyPlayedTracks({ limit: 20 }).then((res) => {\n  //     setRecentlyPlayed(\n  //       res.body.items.map(({track}) => {\n  //         return {\n  //           id: track.id,\n  //           artist: track.artists[0].name,\n  //           title: track.name,\n  //           uri: track.uri,\n  //           albumUrl: track.album.images[0].url,\n  //         };\n  //       })\n  //     )\n  //   })\n  // }, [accessToken]);\n  \n  // Get recently played tracks \n  useEffect(() => {\n    if (!accessToken) return;\n    // const fetchRecentlyPlayed = () => {\n      axios\n        .get(\"https://api.spotify.com/v1/me/player/recently-played?limit=10\", {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n        })\n        .then((res) => {\n          const recentlyplayedlist = res.data.items;\n          console.log(recentlyplayedlist);\n          setRecentlyPlayed(recentlyplayedlist);\n        });\n    // };\n    // fetchRecentlyPlayed();\n  }, []);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    const fetchUserInfo = () => {\n      axios\n        .get(\"https://api.spotify.com/v1/me\", {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n        })\n        .then((res) => {\n          // console.log(res.data);\n          setUserInfo(res.data);\n        });\n    };\n    fetchUserInfo();\n  }, [accessToken]);\n\n  useEffect(() => {\n    setInterval(() => {\n      setShowGreeting(!showGreeting);\n    }, 3000);\n  }, []);\n\n  useEffect(() => {\n    if (!currentTrack) return;\n\n    axios\n      .get(\"http://localhost:3001/lyrics\", {\n        params: {\n          track: currentTrack.title,\n          artist: currentTrack.artist,\n        },\n      })\n      .then((res) => {\n        setLyrics(res.data.lyrics);\n      });\n  }, [currentTrack]);\n  // console.log(searchResults);\n\n  // whenever accesstoken changes, set token on spotifyAPI\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false;\n    spotifyApi.searchTracks(search).then((res) => {\n      if (cancel) return;\n      //info i want: artist name, album image, track name, URI\n      setSearchResults(\n        res.body.tracks.items.map((track) => {\n          // compares the image height and grabs the smallest image\n          const smallestAlbumImage = track.album.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image;\n              return smallest;\n            },\n            track.album.images[0]\n          );\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url,\n          };\n        })\n      );\n    });\n    return () => (cancel = true);\n  }, [search, accessToken]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"container2\"></div>\n      <FadeIn>\n        <form>\n          <input\n            className=\"searchbox\"\n            type=\"search\"\n            placeholder=\"Search Tracks by Songs/Artists\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <div className=\"searchresultslist\">\n            {searchResults.map((track) => (\n              <TrackSearchResult\n                track={track}\n                key={track.uri}\n                chooseTrack={chooseTrack}\n              />\n            ))}\n            {searchResults.length === 0 && (\n              <div className=\"lyricscontainer\">{lyrics}</div>\n            )}\n          </div>\n          {/* passing in the access token to enable playback fn*/}\n          <div>\n            <MusicPlayer\n              trackUri={currentTrack?.uri}\n              accessToken={accessToken}\n            />\n          </div>\n        </form>\n      </FadeIn>\n      <UserProfile userInfo={userInfo} />\n\n      <RecentlyPlayed accessToken={accessToken} recentlyPlayed={recentlyPlayed} />\n    </div>\n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}