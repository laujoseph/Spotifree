{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from './MusicPlayer';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\"\n});\n\nconst MainPage = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n\n  const chooseTrack = track => {\n    setCurrentTrack(track); // when choosing track, empty the search\n\n    setSearch('');\n    setLyrics('');\n  };\n\n  useEffect(() => {\n    if (!currentTrack) return;\n    axios.get('http://localhost:3001/lyrics', {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist\n      }\n    }).then;\n  }, [currentTrack]);\n  console.log(searchResults); // whenever accesstoken changes, set token on spotifyAPI\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // for searching\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return; //info i want: artist name, album image, track name, URI\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchbox\",\n        type: \"search\",\n        placeholder: \"Search by Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchresultslist\",\n        children: searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          track: track,\n          chooseTrack: chooseTrack\n        }, track.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MusicPlayer, {\n          trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n          accessToken: accessToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPage, \"G79D42FvilOJmP2vVRhZ0/jLDyc=\", false, function () {\n  return [useAuth];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResult","MusicPlayer","axios","spotifyApi","clientId","MainPage","code","accessToken","search","setSearch","searchResults","setSearchResults","currentTrack","setCurrentTrack","lyrics","setLyrics","chooseTrack","track","get","params","title","artist","then","console","log","setAccessToken","cancel","searchTracks","res","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from './MusicPlayer';\nimport axios from \"axios\";\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\",\n});\n\nconst MainPage = ({ code }) => {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n\n  const chooseTrack=(track)=>{\n    setCurrentTrack(track)\n    // when choosing track, empty the search\n    setSearch('');\n    setLyrics('');\n  }\n  \n  useEffect(()=> {\n    if(!currentTrack) return\n\n    axios.get('http://localhost:3001/lyrics', {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist,\n      }\n    }).then\n\n  }, [currentTrack])\n  console.log(searchResults)\n  // whenever accesstoken changes, set token on spotifyAPI\n  useEffect(() => {\n    if (!accessToken) return\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  // for searching\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false\n    spotifyApi.searchTracks(search).then((res) => {\n      if (cancel) return\n      //info i want: artist name, album image, track name, URI\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image\n          return smallest\n        }, track.album.images[0])\n\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        }\n      }))\n    });\n      return ()=> (cancel = true)\n  }, [search, accessToken]);\n  \n  return (\n    <div className=\"container\">\n      <form>\n        \n        <input\n          className=\"searchbox\"\n          type=\"search\"\n          placeholder=\"Search by Songs/Artists\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n        <div className=\"searchresultslist\">\n          {searchResults.map(track=>(\n            <TrackSearchResult track={track} key={track.uri} chooseTrack={chooseTrack}/>\n          ))}\n          </div>\n              {/* passing in the access token to enable playback fn*/}\n        <div><MusicPlayer trackUri={currentTrack?.uri} accessToken={accessToken}/></div>\n      </form>\n\n      {/* // Get Current User's Recently Played Tracks\n        spotifyApi.getMyRecentlyPlayedTracks({\n          limit : 20\n        }).then(function(data) {\n            // Output items\n            console.log(\"Your 20 most recently played tracks are:\");\n            data.body.items.forEach(item => console.log(item.track));\n          }, function(err) {\n            console.log('Something went wrong!', err);\n        }); */}\n    </div>\n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}