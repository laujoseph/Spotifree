{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MusicPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MusicPlayer = _ref => {\n  _s();\n\n  let {\n    accessToken,\n    trackUri\n  } = _ref;\n  const [play, setPlay] = useState(false);\n  useEffect(() => setPlay(true), [trackUri]);\n  if (!accessToken) return null;\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    token: accessToken,\n    callback: state // have to pass in trackUri to show which track to play\n    ,\n    uris: trackUri ? [trackUri] : [],\n    play: play // showSaveIcon\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 8\n  }, this);\n};\n\n_s(MusicPlayer, \"jVhLcXDeOrLi5A95zDr62ndrz9E=\");\n\n_c = MusicPlayer;\nexport default MusicPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MusicPlayer.js"],"names":["React","useEffect","useState","SpotifyPlayer","MusicPlayer","accessToken","trackUri","play","setPlay","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;;AAEA,MAAMC,WAAW,GAAG,QAA+B;AAAA;;AAAA,MAA9B;AAAEC,IAAAA,WAAF;AAAgBC,IAAAA;AAAhB,GAA8B;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAiBN,QAAQ,CAAC,KAAD,CAA/B;AAEAD,EAAAA,SAAS,CAAC,MAAKO,OAAO,CAAC,IAAD,CAAb,EAAqB,CAACF,QAAD,CAArB,CAAT;AACA,MAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAClB,sBACG,QAAC,aAAD;AACC,IAAA,KAAK,EAAEA,WADR;AAEC,IAAA,QAAQ,EAAEI,KAFX,CAGC;AAHD;AAIC,IAAA,IAAI,EAAEH,QAAQ,GAAE,CAACA,QAAD,CAAF,GAAe,EAJ9B;AAKC,IAAA,IAAI,EAAEC,IALP,CAMC;;AAND;AAAA;AAAA;AAAA;AAAA,UADH;AAUH,CAfD;;GAAMH,W;;KAAAA,W;AAiBN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport SpotifyPlayer from \"react-spotify-web-playback\"\n\nconst MusicPlayer = ({ accessToken , trackUri}) => {\n    const [play, setPlay] =useState(false)\n\n    useEffect(()=> setPlay(true), [trackUri])\n    if (!accessToken) return null\n    return (\n       <SpotifyPlayer \n        token={accessToken}\n        callback={state}\n        // have to pass in trackUri to show which track to play\n        uris={trackUri? [trackUri] : []}\n        play={play}\n        // showSaveIcon\n       />\n    );\n};\n\nexport default MusicPlayer;"]},"metadata":{},"sourceType":"module"}