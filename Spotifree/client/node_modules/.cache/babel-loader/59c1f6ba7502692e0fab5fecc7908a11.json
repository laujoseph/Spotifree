{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\"\n});\n\nconst MainPage = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n\n  const chooseTrack = track => {\n    setCurrentTrack(track); // when choosing track, empty the search\n\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n  useEffect(() => {\n    if (!currentTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [currentTrack]);\n  console.log(searchResults); // whenever accesstoken changes, set token on spotifyAPI\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.getMyRecentlyPlayedTracks({\n      limit: 20\n    }).then(function (data) {\n      // Output items\n      console.log(\"Your 20 most recently played tracks are:\");\n      data.body.items.forEach(item => console.log(item.track));\n    }, function (err) {\n      console.log('Something went wrong!', err);\n    });\n  }, [accessToken]); // for searching\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return; //info i want: artist name, album image, track name, URI\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchbox\",\n        type: \"search\",\n        placeholder: \"Search by Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value),\n        src: \"./background/search.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchresultslist\",\n        children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          track: track,\n          chooseTrack: chooseTrack\n        }, track.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyricscontainer\",\n          children: lyrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MusicPlayer, {\n          trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n          accessToken: accessToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPage, \"XrJYOqoBvU3QjMZOf1SPsuOI7XU=\", false, function () {\n  return [useAuth];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResult","MusicPlayer","axios","spotifyApi","clientId","MainPage","code","accessToken","search","setSearch","searchResults","setSearchResults","currentTrack","setCurrentTrack","lyrics","setLyrics","chooseTrack","track","get","params","title","artist","then","res","data","console","log","setAccessToken","getMyRecentlyPlayedTracks","limit","body","items","forEach","item","err","cancel","searchTracks","tracks","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\",\n});\n\nconst MainPage = ({ code }) => {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n\n  const chooseTrack = (track) => {\n    setCurrentTrack(track);\n    // when choosing track, empty the search\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n  useEffect(() => {\n    if (!currentTrack) return;\n\n    axios\n      .get(\"http://localhost:3001/lyrics\", {\n        params: {\n          track: currentTrack.title,\n          artist: currentTrack.artist,\n        },\n      })\n      .then((res) => {\n        setLyrics(res.data.lyrics);\n      });\n  }, [currentTrack]);\n  console.log(searchResults);\n  // whenever accesstoken changes, set token on spotifyAPI\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  useEffect(()=>{\n    if (!accessToken) return;\n    spotifyApi.getMyRecentlyPlayedTracks({\n      limit : 20\n    }).then(function(data) {\n        // Output items\n        console.log(\"Your 20 most recently played tracks are:\");\n        data.body.items.forEach(item => console.log(item.track));\n      }, function(err) {\n        console.log('Something went wrong!', err);\n      });\n  }, [accessToken])\n\n  // for searching\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false;\n    spotifyApi.searchTracks(search).then((res) => {\n      if (cancel) return;\n      //info i want: artist name, album image, track name, URI\n      setSearchResults(\n        res.body.tracks.items.map((track) => {\n          // compares the image height and grabs the smallest image\n          const smallestAlbumImage = track.album.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image;\n              return smallest;\n            },\n            track.album.images[0]\n          );\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url,\n          };\n        })\n      );\n    });\n    return () => (cancel = true);\n  }, [search, accessToken]);\n\n  return (\n    <div className=\"container\">\n      <form>\n        <input\n          className=\"searchbox\"\n          type=\"search\"\n          placeholder=\"Search by Songs/Artists\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          src=\"./background/search.png\"\n        />\n        <div className=\"searchresultslist\">\n          {searchResults.map((track) => (\n            <TrackSearchResult\n              track={track}\n              key={track.uri}\n              chooseTrack={chooseTrack}\n            />\n          ))}\n          {searchResults.length === 0 && (\n            <div className=\"lyricscontainer\">{lyrics}</div>\n          )}\n        </div>\n        {/* passing in the access token to enable playback fn*/}\n        <div>\n          <MusicPlayer trackUri={currentTrack?.uri} accessToken={accessToken} />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}