{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport Greeting from './Greeting';\nimport FadeIn from 'react-fade-in';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\"\n});\n\nconst MainPage = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [hideGreeting, setHideGreeting] = useState(true);\n\n  const chooseTrack = track => {\n    setCurrentTrack(track); // when choosing track, empty the search\n\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n  useEffect(() => {\n    if (!currentTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [currentTrack]);\n  console.log(searchResults); // whenever accesstoken changes, set token on spotifyAPI\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // Get the authenticated user\n  // spotifyApi.getMe()\n  // .then(function(data) {\n  //   console.log('Some information about the authenticated user', data.body);\n  // }, function(err) {\n  //   console.log('Something went wrong!', err);\n  // });\n  // for searching track/artist\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return; //info i want: artist name, album image, track name, URI\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FadeIn, {\n      children: [/*#__PURE__*/_jsxDEV(Greeting, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"searchbox\",\n          type: \"search\",\n          placeholder: \"Search Tracks by Songs/Artists\",\n          value: search,\n          onChange: e => setSearch(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchresultslist\",\n          children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n            track: track,\n            chooseTrack: chooseTrack\n          }, track.uri, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lyricscontainer\",\n            children: lyrics\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(MusicPlayer, {\n            trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n            accessToken: accessToken\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPage, \"xG+AuMyQbi22yfc1eNgA734rWOU=\", false, function () {\n  return [useAuth];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResult","MusicPlayer","axios","Greeting","FadeIn","spotifyApi","clientId","MainPage","code","accessToken","search","setSearch","searchResults","setSearchResults","currentTrack","setCurrentTrack","lyrics","setLyrics","hideGreeting","setHideGreeting","chooseTrack","track","get","params","title","artist","then","res","data","console","log","setAccessToken","cancel","searchTracks","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport Greeting from './Greeting';\nimport FadeIn from 'react-fade-in';\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\",\n});\n\nconst MainPage = ({ code }) => {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [hideGreeting, setHideGreeting] = useState(true);\n  \n  const chooseTrack = (track) => {\n    setCurrentTrack(track);\n    // when choosing track, empty the search\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n \n  useEffect(() => {\n    if (!currentTrack) return;\n\n    axios\n      .get(\"http://localhost:3001/lyrics\", {\n        params: {\n          track: currentTrack.title,\n          artist: currentTrack.artist,\n        },\n      })\n      .then((res) => {\n        setLyrics(res.data.lyrics);\n      });\n  }, [currentTrack]);\n  console.log(searchResults);\n\n  // whenever accesstoken changes, set token on spotifyAPI\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n\n\n    // Get the authenticated user\n    // spotifyApi.getMe()\n    // .then(function(data) {\n    //   console.log('Some information about the authenticated user', data.body);\n    // }, function(err) {\n    //   console.log('Something went wrong!', err);\n    // });\n\n  // for searching track/artist\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false;\n    spotifyApi.searchTracks(search).then((res) => {\n      if (cancel) return;\n      //info i want: artist name, album image, track name, URI\n      setSearchResults(\n        res.body.tracks.items.map((track) => {\n          // compares the image height and grabs the smallest image\n          const smallestAlbumImage = track.album.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image;\n              return smallest;\n            },\n            track.album.images[0]\n          );\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url,\n          };\n        })\n      );\n    });\n    return () => (cancel = true);\n  }, [search, accessToken]);\n\n  return (\n    \n    <div className=\"container\">\n      <div className=\"container2\"></div>\n      <FadeIn>\n      <Greeting />\n      <form>\n        <input\n          className=\"searchbox\"\n          type=\"search\"\n          placeholder=\"Search Tracks by Songs/Artists\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n        <div className=\"searchresultslist\">\n          {searchResults.map((track) => (\n            <TrackSearchResult\n              track={track}\n              key={track.uri}\n              chooseTrack={chooseTrack}\n            />\n          ))}\n          {searchResults.length === 0 && (\n            <div className=\"lyricscontainer\">{lyrics}</div>\n          )}\n        </div>\n        {/* passing in the access token to enable playback fn*/}\n        <div>\n          <MusicPlayer trackUri={currentTrack?.uri} accessToken={accessToken} />\n        </div>\n      </form>\n      </FadeIn>        \n    </div>\n    \n    \n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}