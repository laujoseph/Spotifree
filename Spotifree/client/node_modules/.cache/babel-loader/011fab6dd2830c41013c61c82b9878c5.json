{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\"\n});\n\nconst MainPage = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [userInfo, setUserInfo] = useState({});\n\n  const chooseTrack = track => {\n    setCurrentTrack(track); // when choosing track, empty the search\n\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n  spotifyApi.getMe().then(function (data) {\n    setUserInfo(data.body);\n    console.log(userInfo);\n    console.log('Authenticated user information', data.body);\n    return {\n      name: data.body.display_name,\n      email: data.body.email,\n      followers: data.body.followers\n    };\n  }, function (err) {\n    console.log('Something went wrong!', err);\n  });\n  useEffect(() => {\n    if (!currentTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [currentTrack]);\n  console.log(searchResults); // whenever accesstoken changes, set token on spotifyAPI\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // for searching\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return; //info i want: artist name, album image, track name, URI\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchbox\",\n        type: \"search\",\n        placeholder: \"Search Tracks by Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchresultslist\",\n        children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          track: track,\n          chooseTrack: chooseTrack\n        }, track.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyricscontainer\",\n          children: lyrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MusicPlayer, {\n          trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n          accessToken: accessToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: userInfo.display_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPage, \"vkqGBA6ZYQGO7Zu8ZrONtST3x9M=\", false, function () {\n  return [useAuth];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResult","MusicPlayer","axios","spotifyApi","clientId","MainPage","code","accessToken","search","setSearch","searchResults","setSearchResults","currentTrack","setCurrentTrack","lyrics","setLyrics","userInfo","setUserInfo","chooseTrack","track","getMe","then","data","body","console","log","name","display_name","email","followers","err","get","params","title","artist","res","setAccessToken","cancel","searchTracks","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","uri","albumUrl","url","e","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\",\n});\n\nconst MainPage = ({ code }) => {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [userInfo, setUserInfo] = useState({});\n\n  const chooseTrack = (track) => {\n    setCurrentTrack(track);\n    // when choosing track, empty the search\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n  spotifyApi.getMe()\n  .then(function(data) {\n    setUserInfo(data.body)\n    console.log(userInfo)\n    console.log('Authenticated user information', data.body);\n    return {\n      name: data.body.display_name,\n      email: data.body.email,\n      followers: data.body.followers\n    }\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n\n  useEffect(() => {\n    if (!currentTrack) return;\n\n    axios\n      .get(\"http://localhost:3001/lyrics\", {\n        params: {\n          track: currentTrack.title,\n          artist: currentTrack.artist,\n        },\n      })\n      .then((res) => {\n        setLyrics(res.data.lyrics);\n      });\n  }, [currentTrack]);\n  console.log(searchResults);\n\n  // whenever accesstoken changes, set token on spotifyAPI\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  // for searching\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false;\n    spotifyApi.searchTracks(search).then((res) => {\n      if (cancel) return;\n      //info i want: artist name, album image, track name, URI\n      setSearchResults(\n        res.body.tracks.items.map((track) => {\n          // compares the image height and grabs the smallest image\n          const smallestAlbumImage = track.album.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image;\n              return smallest;\n            },\n            track.album.images[0]\n          );\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url,\n          };\n        })\n      );\n    });\n    return () => (cancel = true);\n  }, [search, accessToken]);\n\n  return (\n    \n    <div className=\"container\">\n      <form>\n        <input\n          className=\"searchbox\"\n          type=\"search\"\n          placeholder=\"Search Tracks by Songs/Artists\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n        <div className=\"searchresultslist\">\n          {searchResults.map((track) => (\n            <TrackSearchResult\n              track={track}\n              key={track.uri}\n              chooseTrack={chooseTrack}\n            />\n          ))}\n          {searchResults.length === 0 && (\n            <div className=\"lyricscontainer\">{lyrics}</div>\n          )}\n        </div>\n        {/* passing in the access token to enable playback fn*/}\n        <div>\n          <MusicPlayer trackUri={currentTrack?.uri} accessToken={accessToken} />\n        </div>\n      </form>\n      <div>{userInfo.display_name}</div>\n    </div>\n    \n    \n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}