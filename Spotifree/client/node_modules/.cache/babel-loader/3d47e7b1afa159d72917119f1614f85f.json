{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from './MusicPlayer';\nimport axios from \"axios\";\nimport RecentlyPlayer from './RecentlyPlayed';\nimport RecentlyPlayed from \"./RecentlyPlayed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\"\n});\n\nconst MainPage = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n\n  const chooseTrack = track => {\n    setCurrentTrack(track); // when choosing track, empty the search\n\n    setSearch('');\n    setLyrics('');\n  };\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.getMyRecentlyPlayedTracks({\n      limit: 10\n    }).then(res => {\n      setRecentlyPlayed(res.body.items.map(_ref2 => {\n        let {\n          track\n        } = _ref2;\n        return {\n          id: track.id,\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: track.album.images[0].url\n        };\n      }));\n    });\n  });\n  useEffect(() => {\n    if (!currentTrack) return;\n    axios.get('http://localhost:3001/lyrics', {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [currentTrack]);\n  console.log(searchResults); // whenever accesstoken changes, set token on spotifyAPI\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // for searching\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return; //info i want: artist name, album image, track name, URI\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchbox\",\n        type: \"search\",\n        placeholder: \"Search by Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchresultslist\",\n        children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          track: track,\n          chooseTrack: chooseTrack\n        }, track.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyricscontainer\",\n          children: lyrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MusicPlayer, {\n          trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n          accessToken: accessToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecentlyPlayed, {\n      spotifyApi: spotifyApi,\n      chooseTrack: chooseTrack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPage, \"+a66e8Hs9+6BST4Y+RoIjmppOqE=\", false, function () {\n  return [useAuth];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResult","MusicPlayer","axios","RecentlyPlayer","RecentlyPlayed","spotifyApi","clientId","MainPage","code","accessToken","search","setSearch","searchResults","setSearchResults","currentTrack","setCurrentTrack","lyrics","setLyrics","recentlyPlayed","setRecentlyPlayed","chooseTrack","track","getMyRecentlyPlayedTracks","limit","then","res","body","items","map","id","artist","artists","name","title","uri","albumUrl","album","images","url","get","params","data","console","log","setAccessToken","cancel","searchTracks","tracks","smallestAlbumImage","reduce","smallest","image","height","e","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from './MusicPlayer';\nimport axios from \"axios\";\nimport RecentlyPlayer from './RecentlyPlayed';\nimport RecentlyPlayed from \"./RecentlyPlayed\";\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\",\n});\n\nconst MainPage = ({ code }) => {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n\n  const chooseTrack=(track)=>{\n    setCurrentTrack(track)\n    // when choosing track, empty the search\n    setSearch('');\n    setLyrics('');\n  }\n  \n  useEffect(()=> {\n    if (!accessToken) return\n\n    spotifyApi.getMyRecentlyPlayedTracks({limit:10}).then((res)=>{\n      setRecentlyPlayed(\n        res.body.items.map(({ track}) => {\n          return {\n            id: track.id,\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: track.album.images[0].url,\n          };\n        })\n      )\n    })\n  })\n  useEffect(()=> {\n    if(!currentTrack) return\n\n    axios.get('http://localhost:3001/lyrics', {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist,\n      }\n    }).then(res=>{\n      setLyrics(res.data.lyrics)\n    })\n\n  }, [currentTrack])\n  console.log(searchResults)\n  // whenever accesstoken changes, set token on spotifyAPI\n  useEffect(() => {\n    if (!accessToken) return\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  // for searching\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false\n    spotifyApi.searchTracks(search).then((res) => {\n      if (cancel) return\n      //info i want: artist name, album image, track name, URI\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image\n          return smallest\n        }, track.album.images[0])\n\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        }\n      }))\n    });\n      return ()=> (cancel = true)\n  }, [search, accessToken]);\n  \n  return (\n    <div className=\"container\">\n      <form>\n        \n        <input\n          className=\"searchbox\"\n          type=\"search\"\n          placeholder=\"Search by Songs/Artists\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n        <div className=\"searchresultslist\">\n          {searchResults.map(track=>(\n            <TrackSearchResult track={track} key={track.uri} chooseTrack={chooseTrack}/>\n          ))}\n          {searchResults.length === 0 && (\n            <div className=\"lyricscontainer\">\n              {lyrics}\n            </div>\n          )}\n          </div>\n              {/* passing in the access token to enable playback fn*/}\n        <div><MusicPlayer trackUri={currentTrack?.uri} accessToken={accessToken}/></div>\n      </form>\n\n      <RecentlyPlayed spotifyApi={spotifyApi} chooseTrack={chooseTrack}/>\n    </div>\n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}