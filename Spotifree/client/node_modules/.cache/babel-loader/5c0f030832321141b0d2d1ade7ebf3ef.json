{"ast":null,"code":"var _jsxFileName = \"/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\naxios.defaults.headers['Content-Type'] = 'application/json';\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\"\n});\n\nconst MainPage = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [token, setToken] = useState(null);\n  const [profile, setProfile] = useState(null);\n\n  const chooseTrack = track => {\n    setCurrentTrack(track); // when choosing track, empty the search\n\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n  spotifyApi.getMe().then(function (data) {\n    console.log('Authenticated user information', data.body);\n    return {\n      name: data.body.display_name,\n      email: data.body.email,\n      followers: data.body.followers\n    };\n  }, function (err) {\n    console.log('Something went wrong!', err);\n  });\n  useEffect(() => {\n    setToken(accessToken);\n\n    const fetchData = async () => {\n      try {\n        const {\n          data\n        } = await getCurrentUserProfile();\n        setProfile(data);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!currentTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: currentTrack.title,\n        artist: currentTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [currentTrack]);\n  console.log(searchResults); // whenever accesstoken changes, set token on spotifyAPI\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // for searching\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return; //info i want: artist name, album image, track name, URI\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        // compares the image height and grabs the smallest image\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchbox\",\n        type: \"search\",\n        placeholder: \"Search Tracks by Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchresultslist\",\n        children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          track: track,\n          chooseTrack: chooseTrack\n        }, track.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyricscontainer\",\n          children: lyrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MusicPlayer, {\n          trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n          accessToken: accessToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainPage, \"fRpOTE8bxIvPoH7kxjKICAFuE+w=\", false, function () {\n  return [useAuth];\n});\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/josephlau/Desktop/React/Spotifree/client/src/MainPage.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","TrackSearchResult","MusicPlayer","axios","defaults","baseURL","headers","accessToken","spotifyApi","clientId","MainPage","code","search","setSearch","searchResults","setSearchResults","currentTrack","setCurrentTrack","lyrics","setLyrics","token","setToken","profile","setProfile","chooseTrack","track","getMe","then","data","console","log","body","name","display_name","email","followers","err","fetchData","getCurrentUserProfile","e","get","params","title","artist","res","setAccessToken","cancel","searchTracks","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","uri","albumUrl","url","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport axios from \"axios\";\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\naxios.defaults.headers['Content-Type'] = 'application/json';\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1a9068e5a02c4897adb142f295edfe75\",\n});\n\nconst MainPage = ({ code }) => {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [lyrics, setLyrics] = useState();\n  const [token, setToken] = useState(null);\n  const [profile, setProfile] = useState(null);\n\n  const chooseTrack = (track) => {\n    setCurrentTrack(track);\n    // when choosing track, empty the search\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n  spotifyApi.getMe()\n  .then(function(data) {\n    console.log('Authenticated user information', data.body);\n    return {\n      \n      name: data.body.display_name,\n      email: data.body.email,\n      followers: data.body.followers\n    }\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n  useEffect(()=>{\n    setToken(accessToken);\n\n    const fetchData = async()=>{\n      try {\n        const{data} = await getCurrentUserProfile();\n        setProfile(data);\n      } catch(e) {\n        console.log(e)\n      }\n    };\n  }, [])\n  useEffect(() => {\n    if (!currentTrack) return;\n\n    axios\n      .get(\"http://localhost:3001/lyrics\", {\n        params: {\n          track: currentTrack.title,\n          artist: currentTrack.artist,\n        },\n      })\n      .then((res) => {\n        setLyrics(res.data.lyrics);\n      });\n  }, [currentTrack]);\n  console.log(searchResults);\n\n  // whenever accesstoken changes, set token on spotifyAPI\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  // for searching\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n\n    let cancel = false;\n    spotifyApi.searchTracks(search).then((res) => {\n      if (cancel) return;\n      //info i want: artist name, album image, track name, URI\n      setSearchResults(\n        res.body.tracks.items.map((track) => {\n          // compares the image height and grabs the smallest image\n          const smallestAlbumImage = track.album.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image;\n              return smallest;\n            },\n            track.album.images[0]\n          );\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url,\n          };\n        })\n      );\n    });\n    return () => (cancel = true);\n  }, [search, accessToken]);\n\n  return (\n    \n    <div className=\"container\">\n      <form>\n        <input\n          className=\"searchbox\"\n          type=\"search\"\n          placeholder=\"Search Tracks by Songs/Artists\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n        <div className=\"searchresultslist\">\n          {searchResults.map((track) => (\n            <TrackSearchResult\n              track={track}\n              key={track.uri}\n              chooseTrack={chooseTrack}\n            />\n          ))}\n          {searchResults.length === 0 && (\n            <div className=\"lyricscontainer\">{lyrics}</div>\n          )}\n        </div>\n        {/* passing in the access token to enable playback fn*/}\n        <div>\n          <MusicPlayer trackUri={currentTrack?.uri} accessToken={accessToken} />\n        </div>\n      </form>\n      \n    </div>\n    \n    \n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}